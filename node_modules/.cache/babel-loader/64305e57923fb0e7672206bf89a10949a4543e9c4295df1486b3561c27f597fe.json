{"ast":null,"code":"import { getPost, getPosts } from \"@/services/posts.service\";\nimport { filter } from \"core-js/internals/array-iteration\";\nconst mutations = {\n  setPost(state, post) {\n    state.post = post;\n  },\n  setPosts(state, posts) {\n    state.posts = posts;\n  },\n  setPage(state, page) {\n    state.page = page;\n  },\n  setLoading(state, bool) {\n    state.isPostsLoading = bool;\n  },\n  setPostError(state, error) {\n    state.postsError = error;\n  },\n  setSearchQuery(state, searchQuery) {\n    state.searchQuery = searchQuery;\n  }\n};\nconst actions = {\n  async fetchPost({\n    commit\n  }, id) {\n    try {\n      const post = await getPost(id);\n      commit('setPost', post);\n    } catch (err) {\n      commit('setPostError', err);\n    }\n  },\n  async fetchPosts({\n    state,\n    commit\n  }) {\n    try {\n      commit('setLoading', true);\n      const posts = await getPosts({\n        params: {\n          _page: state.page,\n          _limit: state.limit\n        }\n      });\n      commit('setPosts', posts);\n    } catch (err) {\n      commit('setPostError', err);\n    } finally {\n      commit('setLoading', false);\n    }\n  }\n};\nconst getters = {\n  post: ({\n    post\n  }) => post,\n  posts: ({\n    posts\n  }) => posts,\n  postsError: ({\n    postsError\n  }) => postsError,\n  searchPosts(state) {\n    return [...state.posts].filter(post => post.title.toLowerCase().includes(state.searchQuery.toLowerCase()));\n  }\n};\nconst state = () => ({\n  post: {},\n  posts: [],\n  isPostsLoading: false,\n  postsError: null,\n  searchQuery: '',\n  page: 1,\n  limit: 10\n});\nexport default {\n  mutations,\n  getters,\n  actions,\n  state\n};","map":{"version":3,"names":["getPost","getPosts","filter","mutations","setPost","state","post","setPosts","posts","setPage","page","setLoading","bool","isPostsLoading","setPostError","error","postsError","setSearchQuery","searchQuery","actions","fetchPost","commit","id","err","fetchPosts","params","_page","_limit","limit","getters","searchPosts","title","toLowerCase","includes"],"sources":["C:/Users/Feed/Documents/naturesec/front/nature-front/src/store/post.js"],"sourcesContent":["import {getPost,getPosts} from \"@/services/posts.service\";\r\nimport {filter} from \"core-js/internals/array-iteration\";\r\n\r\nconst mutations = {\r\n    setPost(state,post){\r\n    state.post = post\r\n    },\r\n    setPosts(state,posts){\r\n    state.posts = posts\r\n    },\r\n    setPage(state,page){\r\n      state.page = page\r\n    },\r\n    setLoading(state,bool){\r\n        state.isPostsLoading = bool\r\n    },\r\n    setPostError(state,error){\r\n    state.postsError = error\r\n    },\r\n    setSearchQuery(state,searchQuery){\r\n        state.searchQuery = searchQuery\r\n    },\r\n}\r\n\r\nconst actions = {\r\n    async fetchPost({commit},id){\r\n        try {\r\n            const post = await  getPost(id)\r\n            commit('setPost',post)\r\n        } catch (err){\r\n            commit('setPostError',err)\r\n\r\n        }\r\n    },\r\n    async fetchPosts({state,commit}){\r\n        try {\r\n            commit('setLoading',true);\r\n            const posts = await  getPosts({\r\n                params:{\r\n                    _page: state.page,\r\n                    _limit: state.limit\r\n                }\r\n            });\r\n            commit('setPosts',posts)\r\n        } catch (err){\r\n            commit('setPostError',err)\r\n        } finally {\r\n            commit('setLoading',false);\r\n        }\r\n    },\r\n}\r\n\r\nconst getters = {\r\n    post: ({post}) => post,\r\n    posts: ({posts}) => posts,\r\n    postsError: ({postsError}) => postsError,\r\n    searchPosts(state){\r\n        return [...state.posts].filter(post=>post.title.toLowerCase().includes(state.searchQuery.toLowerCase()))\r\n    }\r\n}\r\nconst state = () => ({\r\n    post:{},\r\n    posts: [],\r\n    isPostsLoading: false,\r\n    postsError: null,\r\n    searchQuery:'',\r\n    page:1,\r\n    limit:10,\r\n})\r\nexport default {\r\n    mutations,\r\n    getters,\r\n    actions,\r\n    state\r\n}"],"mappings":"AAAA,SAAQA,OAAO,EAACC,QAAQ,QAAO,0BAA0B;AACzD,SAAQC,MAAM,QAAO,mCAAmC;AAExD,MAAMC,SAAS,GAAG;EACdC,OAAOA,CAACC,KAAK,EAACC,IAAI,EAAC;IACnBD,KAAK,CAACC,IAAI,GAAGA,IAAI;EACjB,CAAC;EACDC,QAAQA,CAACF,KAAK,EAACG,KAAK,EAAC;IACrBH,KAAK,CAACG,KAAK,GAAGA,KAAK;EACnB,CAAC;EACDC,OAAOA,CAACJ,KAAK,EAACK,IAAI,EAAC;IACjBL,KAAK,CAACK,IAAI,GAAGA,IAAI;EACnB,CAAC;EACDC,UAAUA,CAACN,KAAK,EAACO,IAAI,EAAC;IAClBP,KAAK,CAACQ,cAAc,GAAGD,IAAI;EAC/B,CAAC;EACDE,YAAYA,CAACT,KAAK,EAACU,KAAK,EAAC;IACzBV,KAAK,CAACW,UAAU,GAAGD,KAAK;EACxB,CAAC;EACDE,cAAcA,CAACZ,KAAK,EAACa,WAAW,EAAC;IAC7Bb,KAAK,CAACa,WAAW,GAAGA,WAAW;EACnC;AACJ,CAAC;AAED,MAAMC,OAAO,GAAG;EACZ,MAAMC,SAASA,CAAC;IAACC;EAAM,CAAC,EAACC,EAAE,EAAC;IACxB,IAAI;MACA,MAAMhB,IAAI,GAAG,MAAON,OAAO,CAACsB,EAAE,CAAC;MAC/BD,MAAM,CAAC,SAAS,EAACf,IAAI,CAAC;IAC1B,CAAC,CAAC,OAAOiB,GAAG,EAAC;MACTF,MAAM,CAAC,cAAc,EAACE,GAAG,CAAC;IAE9B;EACJ,CAAC;EACD,MAAMC,UAAUA,CAAC;IAACnB,KAAK;IAACgB;EAAM,CAAC,EAAC;IAC5B,IAAI;MACAA,MAAM,CAAC,YAAY,EAAC,IAAI,CAAC;MACzB,MAAMb,KAAK,GAAG,MAAOP,QAAQ,CAAC;QAC1BwB,MAAM,EAAC;UACHC,KAAK,EAAErB,KAAK,CAACK,IAAI;UACjBiB,MAAM,EAAEtB,KAAK,CAACuB;QAClB;MACJ,CAAC,CAAC;MACFP,MAAM,CAAC,UAAU,EAACb,KAAK,CAAC;IAC5B,CAAC,CAAC,OAAOe,GAAG,EAAC;MACTF,MAAM,CAAC,cAAc,EAACE,GAAG,CAAC;IAC9B,CAAC,SAAS;MACNF,MAAM,CAAC,YAAY,EAAC,KAAK,CAAC;IAC9B;EACJ;AACJ,CAAC;AAED,MAAMQ,OAAO,GAAG;EACZvB,IAAI,EAAEA,CAAC;IAACA;EAAI,CAAC,KAAKA,IAAI;EACtBE,KAAK,EAAEA,CAAC;IAACA;EAAK,CAAC,KAAKA,KAAK;EACzBQ,UAAU,EAAEA,CAAC;IAACA;EAAU,CAAC,KAAKA,UAAU;EACxCc,WAAWA,CAACzB,KAAK,EAAC;IACd,OAAO,CAAC,GAAGA,KAAK,CAACG,KAAK,CAAC,CAACN,MAAM,CAACI,IAAI,IAAEA,IAAI,CAACyB,KAAK,CAACC,WAAW,EAAE,CAACC,QAAQ,CAAC5B,KAAK,CAACa,WAAW,CAACc,WAAW,EAAE,CAAC,CAAC;EAC5G;AACJ,CAAC;AACD,MAAM3B,KAAK,GAAGA,CAAA,MAAO;EACjBC,IAAI,EAAC,CAAC,CAAC;EACPE,KAAK,EAAE,EAAE;EACTK,cAAc,EAAE,KAAK;EACrBG,UAAU,EAAE,IAAI;EAChBE,WAAW,EAAC,EAAE;EACdR,IAAI,EAAC,CAAC;EACNkB,KAAK,EAAC;AACV,CAAC,CAAC;AACF,eAAe;EACXzB,SAAS;EACT0B,OAAO;EACPV,OAAO;EACPd;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}