{"ast":null,"code":"import { getPost, getPosts } from \"@/services/posts.service\";\nconst mutations = {\n  setPost(state, post) {\n    state.post = post;\n  },\n  setPosts(state, posts) {\n    state.posts = posts;\n  },\n  setPage(state, page) {\n    state.page = page;\n  },\n  setLoading(state, bool) {\n    state.isPostsLoading = bool;\n  },\n  setPostError(state, error) {\n    state.postsError = error;\n  },\n  setSearchQuery(state, searchQuery) {\n    state.searchQuery = searchQuery;\n  },\n  setTotalPages(state, totalPages) {\n    state.totalPages = totalPages;\n  }\n};\nconst actions = {\n  async fetchPost({\n    commit\n  }, id) {\n    try {\n      const post = await getPost(id);\n      commit('setPost', post);\n      message: \"Пользователь не авторизован\";\n    } catch (err) {\n      commit('setPostError', err);\n    }\n  },\n  async fetchPosts({\n    state,\n    commit\n  }) {\n    try {\n      commit('setLoading', true);\n      const posts = await getPosts({\n        params: {\n          _page: state.page,\n          _limit: state.limit\n        }\n      });\n      commit('setPosts', posts);\n    } catch (err) {\n      commit('setPostError', err);\n    } finally {\n      commit('setLoading', false);\n    }\n  },\n  async loadMorePosts({\n    state,\n    commit\n  }) {\n    try {\n      commit('setPage', state.page + 1);\n      const posts = await getPosts({\n        params: {\n          _page: state.page,\n          _limit: state.limit\n        }\n      });\n      commit('setTotalPages', Math.ceil(posts.headers['x-total-count'] / state.limit));\n      commit('setPosts', [...state.posts, ...posts.data]);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n};\nconst getters = {\n  post: ({\n    post\n  }) => post,\n  posts: ({\n    posts\n  }) => posts,\n  postsError: ({\n    postsError\n  }) => postsError,\n  searchPosts(state) {\n    return [...state.posts].filter(post => post.title.toLowerCase().includes(state.searchQuery.toLowerCase()));\n  },\n  sortedPosts(state) {\n    return [...state.posts].filter(post => post.description.includes('Услуги'));\n  }\n};\nconst state = () => ({\n  post: {},\n  posts: [],\n  isPostsLoading: false,\n  postsError: null,\n  searchQuery: '',\n  page: 1,\n  limit: 3,\n  totalPages: 0\n});\nexport default {\n  mutations,\n  getters,\n  actions,\n  state\n};","map":{"version":3,"names":["getPost","getPosts","mutations","setPost","state","post","setPosts","posts","setPage","page","setLoading","bool","isPostsLoading","setPostError","error","postsError","setSearchQuery","searchQuery","setTotalPages","totalPages","actions","fetchPost","commit","id","message","err","fetchPosts","params","_page","_limit","limit","loadMorePosts","Math","ceil","headers","data","e","console","log","getters","searchPosts","filter","title","toLowerCase","includes","sortedPosts","description"],"sources":["C:/Users/Feed/Documents/naturesec/front/nature-front/src/store/post.js"],"sourcesContent":["import {getPost,getPosts} from \"@/services/posts.service\";\r\n\r\nconst mutations = {\r\n    setPost(state,post){\r\n    state.post = post\r\n    },\r\n    setPosts(state,posts){\r\n    state.posts = posts\r\n    },\r\n    setPage(state,page){\r\n      state.page = page\r\n    },\r\n    setLoading(state,bool){\r\n        state.isPostsLoading = bool\r\n    },\r\n    setPostError(state,error){\r\n    state.postsError = error\r\n    },\r\n    setSearchQuery(state,searchQuery){\r\n        state.searchQuery = searchQuery\r\n    },\r\n    setTotalPages(state, totalPages) {\r\n        state.totalPages = totalPages\r\n    },\r\n\r\n}\r\n\r\nconst actions = {\r\n    async fetchPost({commit},id){\r\n        try {\r\n            const post = await  getPost(id)\r\n            commit('setPost',post);\r\n            message: \"Пользователь не авторизован\"\r\n        } catch (err){\r\n            commit('setPostError',err)\r\n\r\n        }\r\n    },\r\n    async fetchPosts({state,commit}){\r\n        try {\r\n            commit('setLoading',true);\r\n            const posts = await  getPosts({\r\n                params:{\r\n                    _page: state.page,\r\n                    _limit: state.limit\r\n                }\r\n            });\r\n            commit('setPosts',posts)\r\n        } catch (err){\r\n            commit('setPostError',err)\r\n        } finally {\r\n            commit('setLoading',false);\r\n        }\r\n    },\r\n    async loadMorePosts({state, commit}) {\r\n        try {\r\n            commit('setPage', state.page + 1)\r\n            const posts = await  getPosts({\r\n                params:{\r\n                    _page: state.page,\r\n                    _limit: state.limit\r\n                }\r\n            });\r\n            commit('setTotalPages', Math.ceil(posts.headers['x-total-count'] / state.limit))\r\n            commit('setPosts', [...state.posts, ...posts.data]);\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\n\r\nconst getters = {\r\n    post: ({post}) => post,\r\n    posts: ({posts}) => posts,\r\n    postsError: ({postsError}) => postsError,\r\n    searchPosts(state){\r\n        return [...state.posts].filter(post=>post.title.toLowerCase().includes(state.searchQuery.toLowerCase()))\r\n    },\r\n    sortedPosts(state){\r\n        return [...state.posts].filter(post=>post.description.includes('Услуги'))\r\n    }\r\n}\r\nconst state = () => ({\r\n    post:{},\r\n    posts: [],\r\n    isPostsLoading: false,\r\n    postsError: null,\r\n    searchQuery:'',\r\n    page:1,\r\n    limit:3,\r\n    totalPages: 0,\r\n})\r\nexport default {\r\n    mutations,\r\n    getters,\r\n    actions,\r\n    state\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}